---
title: "ic_amamentação"
output: html_document
date: "2023-10-19"
---
Chuncks com ```{r eval=FALSE, include=FALSE} são códigos que mudei, mas ainda funcionam

  
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = F)
```

## CARREGAMENTO DAS BIBLIOTECAS

```{r, warning=F, message=F}
library(tidyverse)  
library(here)       
library(haven)         
library(labelled)    
library(janitor)
library(ggplot2)
library(survival)
library(corrr)### talvez
library(ggfortify)
library(summarytools)
library(htmltools)
library(knitr)
library(kableExtra)
library(readxl)
```

## CARREGAMENTO E ADAPTAÇÃO DA BASE DE DADOS

#############
```{r}
library(matchmaker)
## importação da base de dados+clean_names()
dados_2 <- read_sav("dados-amamentacao.sav") %>% clean_names()
## vetores com nomes das variaveis de cada tipo
### variaveis de identificação
var_id <- c("n_rand", "grupo", "indic_gemelar", "indic_mae", "indic_info_ganho_peso", "indic_t", "indic_tempo","filter")
###variaveis de sim ou não string
var_sn <- c(
  "trabalha_sn", "mora_com_compan", "af_ca_mama", "orien_amam_prev",
  "gravid_plan", "gravid_desej", "complic_relac_parto",
  "uti", "amament_prev_sn",
  "t1_retorno_ao_trabalho", "t2_retorno_trabalho", "t3_retorno_trabalho"
)
###variaveis de sim ou não numeric
var_sn_10 <- c(
  "religiao_sn", "para_sn",
  "horas_trab_menor_igual7", "horas_trab_menor_7",
  "idade_menor26", "idade_menor_igual26",
  "dias_int_mae_pos_parto_menor_igual3", "dias_int_mae_pos_parto_menor3",
  "ig_parto_36", "ig_parto_37", "ajuda_para_cuidar",
  "dificuldade_para_amamentar", "dor_amamentar",
  "media_amament_prev_12", "peso_nasc_2300",
  "total_t_int_menor11", "ganho_peso_por_dia_menor_igual21",
  "t1_amamen_exclusiva_sn", "t2_amamen_exclusiva_sn", "t3_amamen_exclusiva_sn", "amamen_exclusiva_sn",
  "censura", "retorno_trabalho"
)
###variaveis de fator numeric
var_fct_num <- c(
  "ig_inclus_corrigida_35",
  "religiao_catolica_sn",
  "salario_familiar_cat", "salario_familiar_2cat",
  "idade_faixa_et"
)
###variaveis de fator cahracter
var_fct_chr <- c(
  "mamilos", "tipo_parto", "escolaridade_cat", "sexo"
)
###variaveis numéricas
var_num <- c(
  "ig_inclus_corrigida", "horas_trab_dia", "salario_familiar", "idade",
  "dias_int_mae_pos_parto", "ig_parto", "num_filhos_amamentou_todos","media_amament_prev_meses_todos",
  "peso_nasc", "uti_t_int_todos", "total_t_int", "ganho_peso_por_dia", "tempo"
)
### variaveis de fatores gerais
var_fct <- c(var_fct_num,var_sn_10)
### arrumando a classe dos fatores
dados_2[,var_fct] <- lapply(dados_2[,var_fct], as_factor)
### gerando dicionário
dicionario <- read_sav("dados-amamentacao.sav") %>% 
  janitor::clean_names()%>% 
  labelled::generate_dictionary()
### mudando nomes das variaveis de fatores
dados_2[,var_fct] <- lapply(dados_2[,var_fct], as_factor)
###limpando a base
df_geral <- dados_2
## limpando nome das variaveis, e removendo as duas perdas 
df_geral <- df_geral %>% 
  janitor::clean_names() %>%
  dplyr::filter(!is.na(tempo_vida_ate_parada_amament_ate180)==TRUE) %>% 
  dplyr::filter(!is.na(censura)==TRUE) %>% 
  dplyr::rename(tempo=tempo_vida_ate_parada_amament_ate180)
```


#############

```{r eval=FALSE, include=FALSE}

## importação da base de dados+clean_names()
df_geral <- readxl::read_excel("dados_em_excel.xlsx") 
df_geral <- dados_2
## limpando nome das variaveis, e removendo as duas perdas 
df_geral <- df_geral %>% 
  janitor::clean_names() %>%
  dplyr::filter(!is.na(tempo_vida_ate_parada_amament_ate180)==TRUE) %>% 
  dplyr::filter(!is.na(censura)==TRUE) %>% 
  dplyr::rename(tempo=tempo_vida_ate_parada_amament_ate180)
## vetores com nomes das variaveis de cada tipo
### variaveis de identificação
var_id <- c("n_rand", "grupo", "indic_gemelar", "indic_mae", "indic_info_ganho_peso", "indic_t", "indic_tempo","filter")
###variaveis de sim ou não string
var_sn <- c(
  "trabalha_sn", "mora_com_compan", "af_ca_mama", "orien_amam_prev",
  "gravid_plan", "gravid_desej", "complic_relac_parto",
  "uti", "amament_prev_sn",
  "t1_retorno_ao_trabalho", "t2_retorno_trabalho", "t3_retorno_trabalho"
)
###variaveis de sim ou não numeric
var_sn_10 <- c(
  "religiao_sn", "para_sn",
  "horas_trab_menor_igual7", "horas_trab_menor_7",
  "idade_menor26", "idade_menor_igual26",
  "dias_int_mae_pos_parto_menor_igual3", "dias_int_mae_pos_parto_menor3",
  "ig_parto_36", "ig_parto_37", "ajuda_para_cuidar",
  "dificuldade_para_amamentar", "dor_amamentar",
  "media_amament_prev_12", "peso_nasc_2300",
  "total_t_int_menor11", "ganho_peso_por_dia_menor_igual21",
  "t1_amamen_exclusiva_sn", "t2_amamen_exclusiva_sn", "t3_amamen_exclusiva_sn", "amamen_exclusiva_sn",
  "censura", "retorno_trabalho"
)
###variaveis de fator numeric
var_fct_num <- c(
  "ig_inclus_corrigida_35",
  "religiao_catolica_sn",
  "salario_familiar_cat", "salario_familiar_2cat",
  "idade_faixa_et"
)
###variaveis de fator cahracter
var_fct_chr <- c(
  "mamilos", "tipo_parto", "escolaridade_cat", "sexo"
)
###variaveis numéricas
var_num <- c(
  "ig_inclus_corrigida", "horas_trab_dia", "salario_familiar", "idade",
  "dias_int_mae_pos_parto", "ig_parto", "num_filhos_amamentou_todos","media_amament_prev_meses_todos",
  "peso_nasc", "uti_t_int_todos", "total_t_int", "ganho_peso_por_dia", "tempo"
)
df_geral[,var_num] <- lapply(df_geral[,var_num], as.numeric)
dicionario <- read_sav("dados-amamentacao.sav") %>% 
  janitor::clean_names()%>% 
  labelled::generate_dictionary()

```

## descritiva_mae

### vetor com nomes dos dados que voltados a mãe

```{r}
vet_nao_mae <- c("n_rand", "grupo", "indic_gemelar", "indic_info_ganho_peso", "indic_t", "indic_tempo","filter","sexo","peso_nasc","peso_nasc_2300","uti","uti_t_int_todos","total_t_int", "total_t_int_menor11","ganho_peso_por_dia","ganho_peso_por_dia_menor_igual21")
vet_mae <- setdiff(names(df_geral), vet_nao_mae)
#duvidas: "uti" é dos filhos, mas necessáriamente se um gêmeo foi internado, o outro também será? COLOQUEI NO VETOR PARA TIRAR
#mesma duvida para variaveis "uti_t_int_todos" , "total_t_int", "total_t_int_menor11", 
```


### dados numéricos
  
```{r eval=FALSE, include=FALSE}
df_mae_num <- df_geral %>% 
  dplyr::filter(indic_mae==1) %>% 
  #dplyr::select(setdiff(var_fct_num, vet_nao_mae))
  dplyr::select(var_num)
med_var_mae <- data.frame(media=colMeans(df_mae_num, na.rm = TRUE), variancia=apply(df_mae_num, 2, var, na.rm = TRUE))
med_var_mae %>% kbl() %>%kable_styling()
```
```{r}
df_mae_num <- df_geral %>% 
  dplyr::filter(indic_mae==1) %>% 
  #dplyr::select(setdiff(var_fct_num, vet_nao_mae))
  dplyr::select(var_num)
med_var_mae <- data.frame(media=colMeans(df_mae_num, na.rm = TRUE), variancia=apply(df_mae_num, 2, var, na.rm = TRUE))
med_var_mae %>% kbl() %>%kable_styling()
```

### dadosde fatores
#### fatores sim ou não
```{r eval=FALSE, include=FALSE}
## df que será usado
df_mae_fator_sn <- df_geral %>% 
  dplyr::select(c(var_sn,var_sn_10))
for (i in names(df_mae_fator_sn)){
  a <- table(df_mae_fator_sn[[i]])
  nome_2 <- "frequencia da variavel"
  print(paste(nome_2, i))
  print(a)
  cat("\n")  # Add a blank line
}
```
#### fatores gerais
```{r eval=FALSE, include=FALSE}
## df que será usado
df_mae_fator_g <- df_geral %>% 
  select(c(var_fct_chr,var_fct_num))
for (i in names(df_mae_fator_g)){
  a <- table(df_mae_fator_g[[i]])
  nome_2 <- "frequencia da variavel"
  print(paste(nome_2, i))
  print(a)
  cat("\n")  # Add a blank line
}
```

```{r}
df_mae_fator <- df_geral %>% 
  dplyr::filter(indic_mae==1) %>% 
  dplyr::select(c(intersect(vet_mae,var_fct)))
for (i in names(df_mae_fator)){
  a <- table(df_mae_fator[[i]])
  nome_2 <- "frequencia da variavel"
  print(paste(nome_2, i))
  print(a)
  cat("\n")  # Add a blank line
}

```







## criação do estimador de kaplan meier e testes log-rank

```{r eval=FALSE, include=FALSE}
tem_diff_geral <- function(df_mae){
  # vetor de sobrevivência
  st <- Surv(df_mae$tempo,df_mae$censura)
  #criação das variaveis que serão usadas no laço for e if
  lr <- list()
  tem_diff <- list()
  tamanho_n <- length(names(df_mae))
  lr_geral <- list()
  for (i in 1:tamanho_n){
    formula <- as.formula(paste("st ~ df_mae[[", i, "]]"))
    ekm <- survfit(formula)
    lr_unico <- survdiff(formula)
    nomes <- names(df_mae)
    nomes_i <- nomes[i]
    lr[[nomes_i]] <- lr_unico
    #lista com todos log_rank
    lr_geral <- c(lr_geral,lr)
    #lista com todos log_rank com pvalue<0.05
    if (lr_unico$pvalue<0.05){
      tem_diff[[nomes_i]] <- lr_unico
    }
  }
  return(list(lr_geral=lr_geral,tem_diff=tem_diff))
}
log_rank_para_df_mae<- tem_diff_geral(df_mae)
log_rank_para_df_geral <- tem_diff_geral(df_geral)
```


