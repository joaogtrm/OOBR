---
title: "Tratamento dos dados"
author: "Joao_Gabriel"
date: "2023-08-23"
output: html_document
---

A etapa de tratamento de dados é uma etapa de padronização. Esta é uma das etapas mais importantes para qualquer trabalho envolvendo dados, pois é onde ocorre a buscar por erros de digitação, informações    inconsistentes, classificação errada de variáveis, entre outros que, se não revisados, é quase certo que irão resultar em problemas. Neste texto, é usada a base de dados disponibilizada pelo Observatório Obstétrico Brasileiro, encontrada neste [link](https://github.com/observatorioobstetrico/livro_cd_saude-QUARTO/blob/main/dados/dados_covid%5BSUJO%5D.rds). Os dados considerados nas aplicações são provenientes do Sistema de Informação da Vigilância Epidemiológica da Gripe (SIVEP-Gripe), sistema oficial para o registro dos casos e óbitos por Síndrome Respiratória Aguda Grave (SRAG) disponibilizado pelo Ministério da Saúde. O dicionário da base de dados, que contém a explicação de cada variável, assim como seus possíveis valores, está disponibilizado neste [link](https://observatorioobstetrico.github.io/livro_cd_saude-QUARTO/intro.html#tbl-covid19)

No decorrer do texto podem surgir algumas dúvidas em relação a algumas palavras, então logo abaixo se encontra um mini-dicionário, algo simples que irá nos ajudar no contexto do exemplo com que iremos trabalhar:
  
  1) Base de dados: Tabela em que estão armazenados os dados.

  2) Variáveis: Colunas da base de dados, características de interesse das unidades de análise.  
  
  3) Observações: Linhas da base de dados, cada unidade de análise que teve seus dados coletados.

  4) Valores: a informação, numérica ou não, de uma variável para determianda observação, ou vice-versa. Ex: idade (variável) do paciente 30 (observação).
  
# Instalação de pacotes e carregamento dos dados

Serão usados alguns pacotes no decorrer do nosso projeto, que contém funções que serão de grande ajuda para tratar os dados. Será necessário instalar o pacote, caso não o tenha. A maneira mais fácil de instalar pacotes é usando a função `install.packages()`, conforme a sintaxe abaixo.
```
install.packages("janitor") 
install.packages("dplyr")   
install.packages("knitr")
install.packages("forcats") 
```

Depois de instalados, os pacotes podem ser carregados, usadno a função `library()`.

```{r, warning=F, error=F, message=F}
library(janitor) #pacote para tratar o nome das variáveis, e identificar duplicatas
library(dplyr) # pacote para tratamento de dados no geral
library(knitr) # pacote para formatar tabelas
library(forcats)# pacote para trocar valores das variaveis por seus valores contidos no dicionário 
```

Neste [link](<https://daslab-ufes.github.io/importando-dados/>) encontra-se um post inteiro sobre importação de dados, porém, como a base de dados está no github, é possível fazer a importação sem a necessidade de baixar a base no computador, acessando o link do github, copiando o caminho do link anexado em "view Raw", o salvando como link,usando a função `url()`, e depois o lendo como uma base de dados. Neste caso será usada a função `readRDS()`, pois o arquivo está em formato ".RDS".

```{r}
link <- "https://raw.githubusercontent.com/observatorioobstetrico/dados_livro_cd_saude/main/base_um/basesuja_covid19.rds" # salvando o link do "view Raw" como um texto
link <- url(link) # salvando o link própriamente como uma url
dados_completos <- readRDS(link) # lendo a base de dados, e a salvando
```

Como a base de dados é muito grande (46 variáveis), serão usadas apenas algumas variáveis, para fins didáticos.A função `select()`, do pacote `dplyr`, será usada, pois ela escolhe certas variáveis e cria uma nova base com elas. 

```{r}
dados <- dplyr::select(dados_completos, 
    idade,      # Idade, em anos, da gestante ou puérpera
    CS_GESTANT, # Momento gestacional ou puerpério
    PUERPERA,   # Se paciente é puérpera ou parturiente (mulher que pariu recentemente - até 45 dias do parto)
    CS_ZONA,    # Tipo de zona de residência da gestante ou puérpera
    FEBRE,      # Se gestante ou puérpera manifestou sintoma de febre
    TOSSE,      # Se gestante ou puérpera manifestou sintoma de tosse
    DT_NASC,    # Data de nascimento da gestante ou puérpera
    DT_INTERNA, # Data em que gestante ou puérpera foi hospitalizada
    DT_ENTUTI,  # Data de entrada da gestante ou puérpera na UTI
    DT_SAIDUTI  # Data de saída da gestante ou puérpera na UTI
  )
```

**OBS::** No código acima, usamos o nome do pacote mais 4 pontos, `dplyr::`, para indicar de qual pacote pertence a função que está sendo utilizada, neste caso `select()`. Isso é importante porque dois pacotes podem ter duas funções completamente diferentes, mas com o mesmo nome, sendo necessário explicitar qual pacote está sendo utilizado.

A função `head()` será usada para nos retornar as 6 primeiras observações da base de dados, como uma tabela. A função `kable()`, do pacote `knitr`, também será usada, pois ela é uma função que formata tabelas para melhor vizualização.
**recomendação:** Experimente usar a função sem e com a função `kable()` para entender como essa função modifica

```{r}
knitr::kable(head(dados))
```

# Análise de consistência 

O foco desta etapa será explorar a base de dados em busca de inconsistências, como erros de digitação, observações duplicadas, valores impossíveis (Ex: uma coluna em que os valores são idades de pessoas ter um valor de 200) e dados com valores não padronizados (ex: uma variável de nomes, com valores tanto em maiúsculo quanto em minúsculo).

## Nome das variáveis

Primeiramente, será verificado os nomes das variáveis que estão na base de dados.

```{r}
names(dados)
```

Uma boa prática para padronizar os nomes das variáveis é coloca-los todos em minúsculo, retirar acentos, e substituir espaços por "\_". A função `clean_names()`, do pacote `janitor`, pode ser usada neste caso. 

```{r message=FALSE, warning=FALSE}
dados <- janitor::clean_names(dados)
names(dados)
```

**Obs**: Neste exemplo, a única diferença visível foi que os nomes estão todos em minúsculos, porque eles já estavam sem acento e sem espaço.

## Variaveis duplicadas ou vazias

É comum haver algumas observações duplicadas (basicamente cópias exatas de linhas que aparecem mais de uma vez no conjunto de dados) em nossa base de dados. A função `get_dupes()`, do pacote `janitor`, identifica a existência dessas observações e retorna uma tabela com as variáveis dúplicadas.

```{r}
knitr::kable(janitor::get_dupes(dados))
```

Como não estão especificadas quais variáveis serão utilizadas para a busca de observações duplicadas, todas elas forma usadas. Um exemplo de busca por observações duplicadas, levando em consideração duas variáveis, se encontra abaixo.

```
knitr::kable(janitor::get_dupes(base_de_dados, variavel_1, variavel_2))

```

Se o caso fosse de existir dados duplicados, o problema poderia ser resolvido usando a função `distinct()` do pacote `dplyr`, como está escrito abaixo, para remover as observações duplicadas.

```
base_de_dados <- distinct(base_de_dados) 
```

## Identificar problemas nas variáveis

Quando uma base de dados é importada no R, é possível que algumas das variáveis tenham suas classes definidas de uma forma errada. A classe de uma variável se refer ao tipo de dado que uma variável contém, determinando como os dados são armazenados e tratados pelo R. As principais classes de variáveis se encontram abaixo.

**Double (dbl)**: Classe de variáveis que contenham valores numéricos. tanto números inteiros quanto números decimais. Por exemplo: 3.14, -42, 100.

**Integer (int)**: Classe de variáveis que contenham números inteiros, sem casas decimais. Por exemplo: 1, -10, 500.

**Character (chr)**: Classe de variáveis que contenham texto ou sequências de caracteres. As sequências de caracteres são colocadas entre aspas simples ou duplas. Por exemplo: "Olá, mundo!", 'Programação em R'. A classe "chr" também tem o nome de "string".

**Logical**: Classe de variáveis que contenham valores booleanos, que podem ser TRUE (verdadeiro) ou FALSE (falso), indicando condições binárias. Por exemplo: "TRUE, FALSE", "0, 1", "sim, não".

**Date**: Classe de variáveis que contenham datas. Por exemplo: as.Date("2023-08-24").

**Factor**: Classe de variáveis que contenham fatores, usada para variáveis que têm um número limitado de categorias ou níveis. Por exemplo: Escalas de 1 a 5, onde um representa muito ruim e 5 representa muito bom. 

Um exemplo de como variáveis classificadas errôneamente podem acarretar em problemas se encontra abaixo.

**Ex:** Abaixo, se encontra uma base de dados de nome "dados_alunos". Ela tem informações sobre os alunos, suas idades, e em que série eles se encontram na escola.

```{r}
# criando base de dados
nome <- c("Maria", "João", "Pedro", "Ana", "Lucas")
idade <- as.character(c(10, 11, 9, 12, 13))
série <- c("3ª série", "2ª série", "4ª série", "1ª série", "1ª série")
dados_alunos <- data.frame(Nome = nome, Idade = idade, Série = série)
knitr::kable(dados_alunos)
```

Se o objetivo fosse obter a média das idades, por exemplo, a função `mean()` pode ser usada.

```{r, error=TRUE}
mean(dados_alunos$idade)
```

Um erro foi encontrado, pois a classe da variável "idade" foi lida como character(texto), e não como numeric(número). A classe será mudada, e o código será rodado novamente 

```{r}
dados_alunos$Idade <- as.numeric(dados_alunos$Idade)
mean(dados_alunos$Idade)
```

Agora, a média for computada corretamente.

## Mudança de classe de variáveis 

Usar a função `glimpse()` é um dos meios para vereficar a classe de cada uma das variáveis do nossa base de dados.

```{r}
dplyr::glimpse(dados)
```

### Variaveis de datas

As variáveis "dt_nasc", "dt_interna", "dt_entuti", e "dt_saiduti" representam datas, mas estão classificadas como "character". A função `as.Date()` será usada para alterar as classes das variáveis para "date", com a seguinte sintaxe:

```
base_de_dados$variável <- as.Date(base_de_dados$variável, format = "%d/%m/%Y")
```

Repare que,na sintaxe acima, o "format" está para o formato de datas usado no Brasil, ou seja, "dia/mês/ano", sendo possível ser mudado para outros formatos de datas (como o padrão dos Estados Unidos, "mês/dia/ano"). Agora, a função será aplicada para os casos necessários.

```{r}
dados$dt_nasc  <- as.Date(dados$dt_nasc, format = "%d/%m/%Y")
dados$dt_interna  <- as.Date(dados$dt_interna, format = "%d/%m/%Y")
dados$dt_entuti  <- as.Date(dados$dt_entuti, format = "%d/%m/%Y")
dados$dt_saiduti  <- as.Date(dados$dt_saiduti, format = "%d/%m/%Y")
dplyr::glimpse(dados) # a função é usada novamente para checar se as classes das variáveis realmente foram mudadas
```

### Variáveis de fator

As variáveis "cs_gestant","puerpera","cs_zona","febre" e "tosse" são variáveis que representam fatores, mas estão classificadas como "integer". A função `as.factor()` será usada para alterar as classes das variáveis para "factor", com a seguinte sintaxe:

```
base_de_dados$variável <- as.factor(base_de_dados$variável)
```

```{r}
dados$cs_gestant <- as.factor(dados$cs_gestant)
dados$puerpera <- as.factor(dados$puerpera)
dados$cs_zona <- as.factor(dados$cs_zona)
dados$febre <- as.factor(dados$febre)
dados$tosse <- as.factor(dados$tosse)
dplyr::glimpse(dados)
```

Agora, as variáveis estão classificadas corretamente, porém, os valores dessas variáveis estão sendo representada como números. Usando o dicionário mencionado no início do texto, os valores das variáveis serão transformados. Para isso, a função `fct_recode()` do pacote `forcats` pode ser usada, com a sintaxe abaixo

```
dados$variavel <- forcats::fct_recode(dados$variavel, valor_real = "valor_numerico da base")
```

```{r}
dados$cs_gestant <- forcats::fct_recode(dados$cs_gestant,
                                     tri1 = "1", 
                                     tri2 = "2",
                                     tri3 = "3",
                                     IG_ig = "4",
                                     nao = "5",
                                     ignorado = "9")

dados$puerpera <- forcats::fct_recode(dados$puerpera,
                                      sim = "1",
                                      nao = "2",
                                      ignorado = "9")

dados$cs_zona <- forcats::fct_recode(dados$cs_zona,
                                  urbana = "1",
                                  rural = "2",
                                  periurbana = "3",
                                  ignorado = "9")

dados$febre <- forcats::fct_recode(dados$febre,
                                   sim = "1",
                                   nao = "2",
                                   ignorado = "9")

dados$tosse <- forcats::fct_recode(dados$tosse,
                                   sim = "1",
                                   nao = "2",
                                   ignorado = "9")

```

Usando novamente a função glimpse, é possível verificar que as classes de todas variáveis foram corrigidas.

**obs:** Não foi preciso mudar classe de nenhuma variável para "double", "integer", nem "numeric", porém se for preciso, as funções `as.double()`,`as.integer` e `as.numeric()`, respectivamente, da mesma forma que os exemplos de datas e fatores

## Considerações finais

Com o auxílio desse texto, é esperado que você consiga dar seus primeiros passos para realizar uma análise de dados. É possível surgir problemas não mencionados no texto ao lidar com uma base de dados pela primeira vez, no entanto, isso não deve ser motivo de preocupação, mas sim de motivação para explorar mais a fundo as possibilidades nesta etapa.
